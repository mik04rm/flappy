{"ast":null,"code":"var _jsxFileName = \"/Users/mik04rm/kody/mik04rm/flappy/src/components/Grid.tsx\";\nimport React from 'react';\nimport { CELL_SIZE, range, Vec2 } from '../utility';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  console.log('Grid render');\n  const GRID_SIZE = 10;\n  const posRow = props.position.row;\n  const posCol = props.position.col;\n\n  if (posRow < 0 || posRow > 9) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  }\n\n  const table = [];\n\n  for (let i = 0; i < GRID_SIZE; i++) {\n    table.push(new Array(GRID_SIZE).fill('black'));\n  }\n\n  for (let i = 0; i < props.obstacles.length; i++) {\n    const obstacle = props.obstacles[i];\n\n    if (obstacle.col < 0 || obstacle.col > 9) {\n      continue;\n    }\n\n    if (obstacle.side === 'top') {\n      for (let i = 0; i < obstacle.height; i++) {\n        table[i][obstacle.col] = 'green';\n      }\n    } else {\n      //bottom\n      const last = GRID_SIZE - 1 - obstacle.height;\n\n      for (let i = GRID_SIZE - 1; i > last; i--) {\n        table[i][obstacle.col] = 'green';\n      }\n    }\n  }\n\n  if (table[posRow][posCol] == 'green') {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  table[posRow][posCol] = 'lime';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: CELL_SIZE * GRID_SIZE + 'px'\n    },\n    children: range(0, 10).map(row => range(0, 10).map(col => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Cell, {\n          color: table[row][col],\n          position: new Vec2(row, col)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mik04rm/kody/mik04rm/flappy/src/components/Grid.tsx"],"names":["React","CELL_SIZE","range","Vec2","Cell","Grid","props","console","log","GRID_SIZE","posRow","position","row","posCol","col","table","i","push","Array","fill","obstacles","length","obstacle","side","height","last","display","flexWrap","width","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {CELL_SIZE, range, Vec2, Obstacle} from '../utility';\nimport Cell from './Cell';\n\ntype GridProps = {position: Vec2; obstacles: Obstacle[]};\n\nconst Grid: React.FC<GridProps> = (props) => {\n    console.log('Grid render');\n    const GRID_SIZE = 10;\n    const posRow = props.position.row;\n    const posCol = props.position.col;\n    if (posRow < 0 || posRow > 9) {\n        return <h1>Game Over</h1>;\n    }\n    const table: string[][] = [];\n    for (let i = 0; i < GRID_SIZE; i++) {\n        table.push(new Array(GRID_SIZE).fill('black'));\n    }\n    for (let i = 0; i < props.obstacles.length; i++) {\n        const obstacle = props.obstacles[i];\n        if (obstacle.col < 0 || obstacle.col > 9) {\n            continue;\n        }\n        if (obstacle.side === 'top') {\n            for (let i = 0; i < obstacle.height; i++) {\n                table[i][obstacle.col] = 'green';\n            }\n        } else {\n            //bottom\n            const last = GRID_SIZE - 1 - obstacle.height;\n            for (let i = GRID_SIZE - 1; i > last; i--) {\n                table[i][obstacle.col] = 'green';\n            }\n        }\n    }\n    if (table[posRow][posCol] == 'green') {\n        return <h1>Game Over</h1>;\n    }\n    table[posRow][posCol] = 'lime';\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                width: CELL_SIZE * GRID_SIZE + 'px'\n            }}>\n            {range(0, 10).map((row) =>\n                range(0, 10).map((col) => {\n                    return (\n                        <div>\n                            <Cell\n                                color={table[row][col]}\n                                position={new Vec2(row, col)}\n                            />\n                        </div>\n                    );\n                })\n            )}\n        </div>\n    );\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}