[{"/Users/mik04rm/kody/mik04rm/flappy/src/index.tsx":"1","/Users/mik04rm/kody/mik04rm/flappy/src/App.tsx":"2","/Users/mik04rm/kody/mik04rm/flappy/src/components/Game.tsx":"3","/Users/mik04rm/kody/mik04rm/flappy/src/utility.ts":"4","/Users/mik04rm/kody/mik04rm/flappy/src/components/Grid.tsx":"5","/Users/mik04rm/kody/mik04rm/flappy/src/components/Cell.tsx":"6"},{"size":207,"mtime":1625495904101,"results":"7","hashOfConfig":"8"},{"size":206,"mtime":1625181184158,"results":"9","hashOfConfig":"8"},{"size":1975,"mtime":1626542718826,"results":"10","hashOfConfig":"8"},{"size":501,"mtime":1625675025160,"results":"11","hashOfConfig":"8"},{"size":1891,"mtime":1626542185369,"results":"12","hashOfConfig":"8"},{"size":438,"mtime":1626542163167,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1a2a9vx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mik04rm/kody/mik04rm/flappy/src/index.tsx",[],[],"/Users/mik04rm/kody/mik04rm/flappy/src/App.tsx",[],"/Users/mik04rm/kody/mik04rm/flappy/src/components/Game.tsx",[],"/Users/mik04rm/kody/mik04rm/flappy/src/utility.ts",["28"],"export class Vec2 {\n    constructor(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    row: number;\n    col: number;\n\n    isEqual(other: Vec2): boolean {\n        return this.row == other.row && this.col == other.col;\n    }\n}\n\nexport const range = (start: number, end: number) =>\n    Array.from({length: end - start}, (v, k) => k + start);\n\nexport const CELL_SIZE = 30;\n\nexport interface Obstacle {\n    col: number;\n    height: number;\n    side: 'bottom' | 'top';\n}\n","/Users/mik04rm/kody/mik04rm/flappy/src/components/Grid.tsx",[],"/Users/mik04rm/kody/mik04rm/flappy/src/components/Cell.tsx",[],{"ruleId":"29","severity":1,"message":"30","line":15,"column":22,"nodeType":"31","messageId":"32","endLine":15,"endColumn":53},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]